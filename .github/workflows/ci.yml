name: CI
on:
  pull_request:
  push:
    branches:
      - main
env:
  python_version: '3.9'

jobs:
  # pre-commit:
  #   name: Pre-commit code style checks
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v3.1.0
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ github.event.pull_request.head.sha }}
  #     - name: Set up Python
  #       uses: actions/setup-python@v4.2.0
  #       with:
  #         python-version: ${{ env.python_version }}
  #     - name: Lint with Pre-commit
  #       uses: pre-commit/action@v3.0.0

  # beefore:
  #   name: Pre-test checks
  #   needs: pre-commit
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       task:
  #       - 'towncrier-check'
  #       - 'package'
  #   steps:
  #   # Check out main; needed for towncrier comparisons.
  #   - uses: actions/checkout@v3.1.0
  #     with:
  #       fetch-depth: 0
  #       ref: main
  #   - uses: actions/checkout@v3.1.0
  #     with:
  #       fetch-depth: 0
  #   - name: Set up Python
  #     uses: actions/setup-python@v4.2.0
  #     with:
  #       python-version: ${{ env.python_version }}
  #   - name: Install dependencies
  #     run: |
  #       pip install --upgrade pip
  #       pip install --upgrade setuptools
  #       pip install setuptools_scm tox
  #   - name: Run pre-test check
  #     run: |
  #       tox -e ${{ matrix.task }}

  # unit-tests:
  #   name: Unit tests
  #   needs: beefore
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       platform: ['macos-latest', 'ubuntu-latest', 'windows-latest']
  #       python-version: ['3.8', '3.9', '3.10', '3.11.0-alpha - 3.11.0']
  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #   - uses: actions/checkout@v3.1.0
  #     with:
  #       fetch-depth: 0
  #   - name: Set up Python
  #     uses: actions/setup-python@v4.2.0
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       pip install --upgrade pip
  #       pip install --upgrade setuptools
  #       pip install setuptools_scm tox coverage[toml]
  #   - name: Test
  #     run: |
  #       tox -e py
  #   - name: Store coverage data
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: coverage-data
  #       path: ".coverage.*"
  #       if-no-files-found: ignore
  #   - name: Report platform coverage
  #     run: |
  #       python -m coverage combine
  #       python -m coverage report

  # coverage:
  #   name: Combine & check coverage.
  #   runs-on: ubuntu-latest
  #   needs:
  #   - unit-tests
  #   steps:
  #   - uses: actions/checkout@v3.1.0
  #     with:
  #       fetch-depth: 0
  #   - uses: actions/setup-python@v2
  #     with:
  #       # Use latest, so it understands all syntax.
  #       python-version: "3.10"
  #   - name: Install dependencies
  #     run: |
  #       pip install --upgrade pip
  #       pip install --upgrade setuptools
  #       pip install coverage[toml]
  #   - name: Retrieve coverage data
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: coverage-data
  #   - name: Normalize paths in coverage data
  #     run: |
  #       # See https://github.com/nedbat/coveragepy/issues/991
  #       for coverage in `ls .coverage.*`; do
  #         sqlite3 $coverage "update file set path = replace(path, '\\', '/')"
  #       done
  #   - name: Combine coverage
  #     run: |
  #       python -m coverage combine
  #   - name: Generate coverage report
  #     run: |
  #       python -m coverage html --skip-covered --skip-empty
  #       python -m coverage report --fail-under=100
  #   - name: Upload HTML report if check failed.
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: html-coverage-report
  #       path: htmlcov
  #     if: ${{ failure() }}

  verify-apps:
    name: App verification
    # needs: unit-tests
    strategy:
      max-parallel: 4
      matrix:
        # os_name: ['macOS', 'windows', 'linux']
        # framework: ['toga', 'pyside2', 'pyside6', 'ppb']
        os_name: ['macOS', 'windows']
        framework: ['toga']
        include:
        - os_name: macOS
          platform: macos-12
          briefcase-data-dir: ~/Library/Caches/org.beeware.briefcase
          pip-cache-dir: ~/Library/Caches/pip
          docker-cache-dir: ~/Library/Containers/com.docker.docker/Data/vms/0/
        - os_name: windows
          platform: windows-latest
          briefcase-data-dir: ~\AppData\Local\BeeWare\briefcase\Cache
          pip-cache-dir: ~\AppData\Local\pip\Cache
          docker-cache-dir: C:\ProgramData\DockerDesktop
        # - os_name: linux
        #   # Need to use at least 22.04 to get the bugfix in flatpak for handling spaces in filenames.
        #   platform: ubuntu-22.04
        #   briefcase-data-dir: ~/.cache/briefcase
        #   pip-cache-dir: ~/.cache/pip
        #   # cache action cannot cache docker images (actions/cache#31)
        #   # docker-cache-dir: /var/lib/docker
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Cache Briefcase tools
      uses: actions/cache@v3.0.10
      with:
        key: briefcase-${{ matrix.platform }}
        path: |
          ~/.cookiecutters
          ${{ matrix.briefcase-data-dir }}
          ${{ matrix.pip-cache-dir }}
          ${{ matrix.docker-cache-dir }}
    - uses: actions/checkout@v3.1.0
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ env.python_version }}
    - name: Install system dependencies
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get install -y flatpak flatpak-builder
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install setuptools_scm
        pip install .
    - name: Create App
      shell: bash
      run: |
        cd tests/apps
        cat verify-${{ matrix.framework }}.config | briefcase new
    - name: Build App
      shell: bash
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create
        briefcase build
        briefcase package --adhoc-sign
    - name: Build Xcode project
      if: matrix.os_name == 'macOS'
      shell: bash
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} Xcode
        briefcase build ${{ matrix.os_name }} Xcode
        briefcase package ${{ matrix.os_name }} Xcode --adhoc-sign
    - name: Build Visual Studio project
      if: matrix.os_name == 'windows'
      shell: bash
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} VisualStudio
        briefcase build ${{ matrix.os_name }} VisualStudio
        briefcase package ${{ matrix.os_name }} VisualStudio --adhoc-sign
    - name: Build Flatpak project
      if: matrix.os_name == 'linux' && matrix.framework == 'toga'
      shell: bash
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} flatpak
        briefcase build ${{ matrix.os_name }} flatpak
        briefcase package ${{ matrix.os_name }} flatpak --adhoc-sign
    - name: Build Android App
      if: matrix.framework == 'toga'
      shell: bash
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create android
        briefcase build android
        briefcase package android --adhoc-sign
    - name: Build iOS App
      if: matrix.platform == 'macos-12' && matrix.framework == 'toga'
      shell: bash
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create iOS
        briefcase build iOS -d "iPhone SE (2nd generation)"
        briefcase package iOS --adhoc-sign
    - name: Build Web App
      if: matrix.framework == 'toga'
      shell: bash
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create web
        briefcase build web
        briefcase package web
