name: CI
on:
  pull_request:
  push:
    branches:
      - main
  workflow_call:
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact; use for artifact retrieval."
        value: ${{ jobs.package.outputs.artifact-name }}

defaults:
  run:
    shell: bash  # https://github.com/beeware/briefcase/pull/912

jobs:
  pre-commit:
    name: Pre-commit checks
    uses: beeware/.github/.github/workflows/pre-commit-run.yml@main

#  towncrier:
#    name: Check towncrier
#    uses: beeware/.github/.github/workflows/towncrier-run.yml@main

  package:
    name: Python Package
    uses: beeware/.github/.github/workflows/python-package-create.yml@main

  unit-tests:
    name: Unit tests
    needs: [pre-commit, towncrier, package]
    runs-on: ${{ matrix.platform }}-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        platform: [ "macos", "ubuntu", "windows" ]
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12-dev" ]
        include:
        - experimental: false
        # Allow dev Python to fail without failing entire job
        - python-version: "3.12-dev"
          experimental: true
        # Run tests against the latest Windows Store Python
        - platform: "windows"
          python-version: "winstore"
          experimental: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0

    - name: Set up Python
      if: matrix.python-version != 'winstore'
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ matrix.python-version }}
        check-latest: true

    - name: Install Windows Store Python
      if: matrix.python-version == 'winstore'
      uses: beeware/.github/.github/actions/install-win-store-python@main
      with:
        python-version: "3.11"

    - name: Get packages
      uses: actions/download-artifact@v3.0.2
      with:
        name: ${{ needs.package.outputs.artifact-name }}
        path: dist

    - name: Install dev dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # We don't actually want to install briefcase; we just want the dev
        # extras so we have a known version of tox and coverage.
        python -m pip install $(ls dist/briefcase-*.whl)[dev]

    - name: Test
      run: tox -e py --installpkg dist/briefcase-*.whl

    - name: Store coverage data
      uses: actions/upload-artifact@v3.1.2
      with:
        name: coverage-data
        path: ".coverage.*"
        if-no-files-found: ignore

    - name: Report platform coverage
      run: |
        python -m coverage combine
        python -m coverage report

  coverage:
    name: Combine & check coverage.
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: "3.x"  # Use latest, so it understands all syntax.

    - name: Install dev dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # We don't actually want to install briefcase;
        # we just want the dev extras so that we have a known version of coverage
        python -m pip install -e .[dev]

    - name: Retrieve coverage data
      uses: actions/download-artifact@v3.0.2
      with:
        name: coverage-data

    - name: Combine coverage
      run: python -m coverage combine

    - name: Generate coverage report
      run: |
        python -m coverage html --skip-covered --skip-empty
        python -m coverage report --fail-under=100

    - name: Upload HTML report if check failed.
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3.1.2
      with:
        name: html-coverage-report
        path: htmlcov

  verify-apps:
    name: Build App
    needs: unit-tests
    uses: beeware/.github/.github/workflows/app-build-verify.yml@main
    with:
      python-version: "3.9"
      runner-os: ${{ matrix.runner-os }}
      framework: ${{ matrix.framework }}
    strategy:
      fail-fast: false
      matrix:
        framework: [ "toga", "pyside2", "pyside6", "ppb" ]
        runner-os: [ "macos-latest", "ubuntu-latest", "windows-latest" ]
