name: CI
on:
  pull_request:
  push:
    branches:
      - main
  workflow_call:
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact; use for artifact retrieval."
        value: ${{ jobs.package.outputs.artifact-name }}

defaults:
  run:
    shell: bash  # https://github.com/beeware/briefcase/pull/912

# Cancel active CI runs for a PR before starting another run
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: Pre-commit checks
    uses: beeware/.github/.github/workflows/pre-commit-run.yml@main

  towncrier:
    name: Check towncrier
    uses: beeware/.github/.github/workflows/towncrier-run.yml@main

  package:
    name: Python package
    uses: beeware/.github/.github/workflows/python-package-create.yml@main

  unit-tests:
    name: Unit tests
    needs: [ pre-commit, towncrier, package ]
    runs-on: ${{ matrix.platform }}-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        platform: [ "macOS", "Ubuntu", "Windows" ]
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12-dev" ]
        include:
        - experimental: false
        # Allow dev Python to fail without failing entire job
        - python-version: "3.12-dev"
          experimental: true
        # Run tests against the latest Windows Store Python
        - platform: "Windows"
          python-version: "winstore"
          experimental: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.2
      with:
        fetch-depth: 0

    - name: Set up Python
      if: startswith(matrix.python-version, '3')
      uses: actions/setup-python@v4.6.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Windows Store Python
      if: matrix.python-version == 'winstore'
      uses: beeware/.github/.github/actions/install-win-store-python@main

    - name: Get Packages
      uses: actions/download-artifact@v3.0.2
      with:
        name: ${{ needs.package.outputs.artifact-name }}
        path: dist

    - name: Install dev Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # We don't actually want to install briefcase; we just
        # want the dev extras so we have a known version of tox.
        python -m pip install $(ls dist/briefcase-*.whl)[dev]

    - name: Test
      id: test
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.platform }}.${{ matrix.python-version }}"
      run: tox -e py --installpkg dist/briefcase-*.whl

    - name: Store Coverage Data
      if: always() && (steps.test.outcome == 'failure' || steps.test.outcome == 'success')
      uses: actions/upload-artifact@v3.1.2
      with:
        name: coverage-data
        path: ".coverage.*"
        if-no-files-found: ignore

  coverage-platform:
    name: Platform coverage - ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}-latest
    needs: unit-tests
    strategy:
      fail-fast: false
      matrix:
        platform: [ "macOS", "Ubuntu", "Windows" ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.2
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4.6.0
      with:
        python-version: |
          3.12-dev
          3.11
          3.10
          3.9
          3.8

    - name: Install dev Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # We don't actually want to install briefcase; we just
        # want the dev extras so we have a known version of tox.
        python -m pip install -e .[dev]

    - name: Retrieve Coverage Data
      uses: actions/download-artifact@v3.0.2
      with:
        name: coverage-data

    - name: ${{ matrix.platform }} Coverage Report
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.platform }}"
      run: tox -qe coverage-platform-html-keep

    - name: Python 3.12 on ${{ matrix.platform }} Coverage Report
      if: success() || failure()
      continue-on-error: true
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.platform }}.3.12-dev"
      run: tox -qe coverage312-html-keep

    - name: Python 3.11 on ${{ matrix.platform }} Coverage Report
      if: success() || failure()
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.platform }}.3.11"
      run: tox -qe coverage311-html-keep

    - name: Python 3.10 on ${{ matrix.platform }} Coverage Report
      if: success() || failure()
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.platform }}.3.10"
      run: tox -qe coverage310-html-keep

    - name: Python 3.9 on ${{ matrix.platform }} Coverage Report
      if: success() || failure()
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.platform }}.3.9"
      run: tox -qe coverage39-html-keep

    - name: Python 3.8 on ${{ matrix.platform }} Coverage Report
      if: success() || failure()
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.platform }}.3.8"
      run: tox -qe coverage38-html-keep

    - name: Upload HTML Coverage Report
      if: failure()
      uses: actions/upload-artifact@v3.1.2
      with:
        name: html-platform-coverage-report-${{ matrix.platform }}
        path: htmlcov

  coverage-project:
    name: Project coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.2
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4.6.0
      with:
        # Use minimum version of python for coverage to avoid phantom branches
        # https://github.com/nedbat/coveragepy/issues/1572#issuecomment-1522546425
        python-version: "3.8"

    - name: Install dev Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # We don't actually want to install briefcase; we just
        # want the dev extras so we have a known version of tox.
        python -m pip install -e .[dev]

    - name: Retrieve Coverage Data
      uses: actions/download-artifact@v3.0.2
      with:
        name: coverage-data

    - name: Project Coverage Report
      id: coverage
      run: tox -qe coverage-project-html

    - name: Upload HTML Coverage Report
      if: always() && steps.coverage.outcome == 'failure'
      uses: actions/upload-artifact@v3.1.2
      with:
        name: html-project-coverage-report
        path: htmlcov

  verify-apps:
    name: Build app
    needs: unit-tests
    uses: beeware/.github/.github/workflows/app-build-verify.yml@main
    with:
      # This *must* be the version of Python that is the system Python on the
      # Ubuntu version used to run Linux tests. We use a fixed ubuntu-22.04
      # rather than `-latest` because at some point, `-latest` will become
      # `-24.04`, but it will be a soft changeover, which will cause havoc with
      # the hard Python version requirement for local system packages.
      python-version: "3.10"
      runner-os: ${{ matrix.runner-os }}
      framework: ${{ matrix.framework }}
    strategy:
      fail-fast: false
      matrix:
        framework: [ "toga", "pyside2", "pyside6", "ppb", "pygame" ]
        runner-os: [ "macos-latest", "ubuntu-22.04", "windows-latest" ]
