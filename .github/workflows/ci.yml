name: CI
on:
  pull_request:
  push:
    branches:
      - main
env:
  python_version: '3.9'

jobs:
  pre-commit:
    name: Pre-commit code style checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v3.1.2
        with:
          python-version: ${{ env.python_version }}
      - name: Lint with Pre-commit
        uses: pre-commit/action@v2.0.3

  beefore:
    name: Pre-test checks
    needs: pre-commit
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        task:
        - 'towncrier-check'
        - 'package'
    steps:
    # Check out main; needed for towncrier comparisons.
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v3.1.2
      with:
        python-version: ${{ env.python_version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install setuptools_scm tox
    - name: Run pre-test check
      run: |
        tox -e ${{ matrix.task }}

  smoke:
    name: Smoke test
    needs: beefore
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v3.1.2
      with:
        python-version: ${{ env.python_version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install setuptools_scm tox
    - name: Test
      run: |
        tox -e py
    - name: Check coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

  python-versions:
    # Only run this and subsequent steps on branches.
    # `github.head_ref` only exists on pull requests.
    if: github.head_ref
    name: Python compatibility test
    needs: smoke
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.8', '3.10', '3.11.0-alpha - 3.11.0']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3.1.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install setuptools_scm tox
    - name: Test
      run: |
        tox -e py
    - name: Check coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

  platform-compat:
    name: Platform compatibility test
    needs: smoke
    strategy:
      max-parallel: 4
      matrix:
        platform: ['macos-latest', 'windows-latest']
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v3.1.2
      with:
        python-version: ${{ env.python_version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install setuptools_scm tox
    - name: Test
      run: |
        tox -e py
    - name: Check coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

  verify-apps:
    name: App verification
    needs: platform-compat
    strategy:
      max-parallel: 4
      matrix:
        os_name: ['macOS', 'windows', 'linux']
        framework: ['toga', 'pyside2', 'pyside6', 'ppb']
        include:
        - os_name: macOS
          platform: macos-latest
          briefcase-data-dir: ~/Library/Caches/org.beeware.briefcase
          pip-cache-dir: ~/Library/Caches/pip
          docker-cache-dir: ~/Library/Containers/com.docker.docker/Data/vms/0/
        - os_name: windows
          platform: windows-latest
          briefcase-data-dir: ~\AppData\Local\BeeWare\briefcase\Cache
          pip-cache-dir: ~\AppData\Local\pip\Cache
          docker-cache-dir: C:\ProgramData\DockerDesktop
        - os_name: linux
          # Need to use at least 22.04 to get the bugfix in flatpak for handling spaces in filenames.
          platform: ubuntu-22.04
          briefcase-data-dir: ~/.cache/briefcase
          pip-cache-dir: ~/.cache/pip
          # cache action cannot cache docker images (actions/cache#31)
          # docker-cache-dir: /var/lib/docker
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Cache Briefcase tools
      uses: actions/cache@v3
      with:
        key: briefcase-${{ matrix.platform }}
        path: |
          ~/.cookiecutters
          ${{ matrix.briefcase-data-dir }}
          ${{ matrix.pip-cache-dir }}
          ${{ matrix.docker-cache-dir }}
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v3.1.2
      with:
        python-version: ${{ env.python_version }}
    - name: Install system dependencies
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get install -y flatpak flatpak-builder
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install setuptools_scm
        pip install .
    - name: Create App
      run: |
        cd tests/apps
        cat verify-${{ matrix.framework }}.config | briefcase new
    - name: Build App
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create
        briefcase build
        briefcase package --adhoc-sign
    - name: Build Xcode project
      if: matrix.os_name == 'macOS'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} Xcode
        briefcase build ${{ matrix.os_name }} Xcode
        briefcase package ${{ matrix.os_name }} Xcode --adhoc-sign
    - name: Build Visual Studio project
      if: matrix.os_name == 'windows'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} VisualStudio
        briefcase build ${{ matrix.os_name }} VisualStudio
        briefcase package ${{ matrix.os_name }} VisualStudio --adhoc-sign
    - name: Build Flatpak project
      if: matrix.os_name == 'linux' && matrix.framework == 'toga'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} flatpak
        briefcase build ${{ matrix.os_name }} flatpak
        briefcase package ${{ matrix.os_name }} flatpak --adhoc-sign
    - name: Build Android App
      if: matrix.framework == 'toga'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create android
        briefcase build android
        briefcase package android --adhoc-sign
    - name: Build iOS App
      if: matrix.platform == 'macos-latest' && matrix.framework == 'toga'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create iOS
        briefcase build iOS -d "iPhone SE (2nd generation)"
        briefcase package iOS --adhoc-sign
