[tox]
envlist = towncrier-check,docs-lint,pre-commit,py{38,39,310,311,312},coverage
labels =
    test = py{38,39,310,311,312},coverage
    test-fast = py{38,39,310,311,312}-fast
    test-cov = py{38,39,310,311,312},coverage-platform
    ci = towncrier-check,docs-lint,pre-commit,py{38,39,310,311,312},coverage-platform
skip_missing_interpreters = True

[pkgenv]
# 2023-04-22 The virtualenv used by Tox has pip 23.1 pinned into it
# This version has a bug on winstore installs of Python, so we
# need to force pip to be updated.
download = True

[testenv:pre-commit]
extras = dev
# 2023-04-22 see pkgenv ↑
download = {[pkgenv]download}
commands = pre-commit run --all-files --show-diff-on-failure --color=always

[testenv:py{,38,39,310,311,312}{,-fast}]
depends: pre-commit
use_develop = fast: True
skip_sdist = fast: True
# Needed on Windows to test data directory creation
passenv = LOCALAPPDATA
setenv = COVERAGE_FILE = {env:COVERAGE_FILE:.coverage}
extras = dev
# 2023-04-22 see pkgenv ↑
download = {[pkgenv]download}
commands =
    !fast : python -m coverage run -m pytest {posargs:-vv}
    fast : python -m pytest {posargs:-vv -n auto}

[testenv:coverage{,38,39,310,311,312}{,-platform}{,-project}{,-html}{,-keep}{,-nofail}]
depends = py{,38,39,310,311,312}
# by default, coverage should run on oldest supported Python for testing platform coverage.
# however, coverage for a particular Python version should match the version used for pytest.
base_python =
    coverage: py38,py39,py310,py311,py312
    coverage38: py38
    coverage39: py39
    coverage310: py310
    coverage311: py311
    coverage312: py312
parallel_show_output = True
extras = dev
# 2023-04-22 see pkgenv ↑
download = {[pkgenv]download}
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:.coverage}
    keep: COMBINE_FLAGS = --keep
    !nofail: REPORT_FLAGS = --fail-under=100
    # disable coverage exclusions for Python version to test entire platform
    {platform,project}: COVERAGE_EXCLUDE_PYTHON_VERSION=disable
    # disable coverage exclusions for host platform to test entire project
    project: COVERAGE_EXCLUDE_PLATFORM=disable
commands_pre =
    python --version
    python -c 'if 1: \
        import os; \
        print("COVERAGE_FILE", os.environ.get("COVERAGE_FILE", "<not set>")); \
        print("COVERAGE_EXCLUDE_PYTHON_VERSION", os.environ.get("COVERAGE_EXCLUDE_PYTHON_VERSION", "<not set>")); \
        print("COVERAGE_EXCLUDE_PLATFORM", os.environ.get("COVERAGE_EXCLUDE_PLATFORM", "<not set>"))'
commands =
    -python -m coverage combine {env:COMBINE_FLAGS}
    html: python -m coverage html --skip-covered --skip-empty
    python -m coverage report {env:REPORT_FLAGS}

[testenv:towncrier-check]
package_env = none
skip_install = True
deps = {[testenv:towncrier]deps}
commands = python -m towncrier.check --compare-with origin/main

[testenv:towncrier]
package_env = none
skip_install = True
deps = towncrier ~= 22.8
commands = towncrier {posargs}

[docs]
build_dir = _build
# -W: make warnings into errors
# --keep-going: continue on errors
# -j: run with multiple processes
# -n: nitpick mode
sphinx_args = -W --keep-going -j auto -n
# -v: verbose logging
# -E: force rebuild of environment
# -T: print traceback on error
# -a: read/parse all files
# -d: use tox's temp dir for caching
sphinx_args_extra = {[docs]sphinx_args} -v -E -T -a -d {envtmpdir}/doctrees

[testenv:docs{,-lint,-all}]
change_dir = docs
extras = docs
passenv =
    # On macOS M1, you need to manually set the location of the PyEnchant
    # library:
    #     export PYENCHANT_LIBRARY_PATH/opt/homebrew/lib/libenchant-2.2.dylib
    PYENCHANT_LIBRARY_PATH
commands =
    !lint-!all : python -m sphinx {[docs]sphinx_args} -b html . {[docs]build_dir}/html
    lint : python -m sphinx {[docs]sphinx_args_extra} -b linkcheck . {[docs]build_dir}/links
    lint : python -m sphinx {[docs]sphinx_args_extra} -b spelling . {[docs]build_dir}/spell
    all  : python -m sphinx {[docs]sphinx_args_extra} -b html . {[docs]build_dir}/html

[testenv:package]
package_env = none
skip_install = True
deps =
    check_manifest
    build
    twine
commands =
    check-manifest -v
    python -m build --outdir dist/ .
    python -m twine check dist/*
