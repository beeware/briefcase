[build-system]
requires = [
    # keep versions in sync with automation/pyproject.toml
    "setuptools==75.8.0",
    "setuptools_scm==8.1.0",
]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]
name = "briefcase"
description = "Tools to support converting a Python project into a standalone native application."
readme = "README.rst"
requires-python = ">= 3.9"
license.text = "New BSD"
authors = [
    {name="Russell Keith-Magee", email="russell@keith-magee.com"},
]
maintainers = [
    {name="BeeWare Team", email="team@beeware.org"},
]
keywords = [
    "app",
    "packaging",
    "installer",
    "macOS",
    "iOS",
    "android",
    "mobile",
    "windows",
    "linux",
    "flatpak",
    "appimage",
    "deb",
    "rpm",
    "pkg",
    "tvOS",
    "watch",
    "watchOS",
    "wearos",
    "web",
    "pyscript",
    "pyodide",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
dependencies = [
    # Dependencies required at runtime are set as ranges to ensure maximum
    # compatibility with the end-user's development environment.
    #
    # Any dependency that is part of the "core python toolchain" (e.g. pip, wheel)
    # specify a minimum version, but no maximum, because we always want the most
    # recent version.
    #
    # limited to <=3.9 for the `group` argument for `entry_points()`
    "importlib_metadata >= 4.4; python_version <= '3.9'",
    "packaging >= 24.2",
    "pip >= 24.3",
    "setuptools >= 60",
    "wheel >= 0.37",
    "build >= 0.10",
    #
    # For the remaining packages: We set the lower version limit to the lowest possible
    # version that satisfies our API needs. If the package uses semver, we set a limit
    # to prevent the next major version (which will potentially cause API breakages).
    # If the package uses calver, we don't pin the upper version, as the upper version
    # provides no basis for determining API stability.
    #
    "cookiecutter >= 2.6.0, < 3.0",
    "dmgbuild >= 1.6.4, < 2.0; sys_platform == 'darwin'",
    "GitPython >= 3.1, < 4.0",
    "platformdirs >= 2.6, < 5.0",
    "psutil >= 5.9, < 7.0",
    "python-dateutil >= 2.9.0.post0",  # transitive dependency (beeware/briefcase#1428)
    "httpx >= 0.20, < 1.0",
    "rich >= 12.6, < 14.0",
    "tomli >= 2.0, < 3.0; python_version <= '3.10'",
    "tomli_w >= 1.0, < 2.0",
]

[project.optional-dependencies]
# Extras used by developers *of* briefcase are pinned to specific versions to
# ensure environment consistency.
dev = [
    "coverage[toml] == 7.6.10",
    "coverage-conditional-plugin == 0.9.0",
    "pre-commit == 4.0.1",
    "pytest == 8.3.4",
    "pytest-xdist == 3.6.1",
    "setuptools_scm == 8.1.0",
    "tox == 4.23.2",
]
# Docs are always built on a specific Python version; see RTD and tox config files,
# and the docs contribution guide.
docs = [
    "furo == 2024.8.6",
    "pyenchant == 3.2.2",
    "sphinx == 8.1.3",
    "sphinx_tabs == 3.4.7",
    "sphinx-autobuild == 2024.10.3",
    "sphinx-copybutton == 0.5.2",
    "sphinxcontrib-spelling == 8.0.1",
]

[project.urls]
Homepage = "https://beeware.org/briefcase"
Funding = "https://beeware.org/contributing/membership/"
Documentation = "https://briefcase.readthedocs.io/en/latest/"
Tracker = "https://github.com/beeware/briefcase/issues"
Source = "https://github.com/beeware/briefcase"

[project.scripts]
briefcase = "briefcase.__main__:main"

[project.entry-points."briefcase.bootstraps"]
None = "briefcase.bootstraps.empty:EmptyBootstrap"
Toga = "briefcase.bootstraps.toga:TogaGuiBootstrap"
Console = "briefcase.bootstraps.console:ConsoleBootstrap"
PySide6 = "briefcase.bootstraps.pyside6:PySide6GuiBootstrap"
Pygame = "briefcase.bootstraps.pygame:PygameGuiBootstrap"

[project.entry-points."briefcase.platforms"]
android = "briefcase.platforms.android"
iOS = "briefcase.platforms.iOS"
linux = "briefcase.platforms.linux"
macOS = "briefcase.platforms.macOS"
# tvOS = "briefcase.platforms.tvOS"
# watchOS = "briefcase.platforms.watchOS"
# wearos = "briefcase.platforms.wearos"
web = "briefcase.platforms.web"
windows = "briefcase.platforms.windows"

[project.entry-points."briefcase.formats.android"]
gradle = "briefcase.platforms.android.gradle"

[project.entry-points."briefcase.formats.iOS"]
xcode = "briefcase.platforms.iOS.xcode"

[project.entry-points."briefcase.formats.linux"]
appimage = "briefcase.platforms.linux.appimage"
flatpak = "briefcase.platforms.linux.flatpak"
system = "briefcase.platforms.linux.system"
# snap = "briefcase.platforms.linux.snap"

[project.entry-points."briefcase.formats.macOS"]
app = "briefcase.platforms.macOS.app"
xcode = "briefcase.platforms.macOS.xcode"

# [project.entry-points."briefcase.formats.tvOS"]
# xcode = "briefcase.platforms.tvOS.xcode"

# [project.entry-points."briefcase.formats.watchOS"]
# xcode = "briefcase.platforms.watchOS.xcode"

# [project.entry-points."briefcase.formats.wearos"]
# gradle = "briefcase.platforms.wearos.gradle"

[project.entry-points."briefcase.formats.web"]
static = "briefcase.platforms.web.static"

[project.entry-points."briefcase.formats.windows"]
app = "briefcase.platforms.windows.app"
visualstudio = "briefcase.platforms.windows.visualstudio"

[tool.coverage.run]
plugins = ["coverage_conditional_plugin"]
parallel = true
branch = true
relative_files = true
source_pkgs = ["briefcase"]

[tool.coverage.paths]
source = [
    "src",
    "**/site-packages",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true
precision = 1
exclude_lines = [
    "pragma: no cover",
    "@(abc\\.)?abstractmethod",
    "NotImplementedError\\(\\)",
    "if TYPE_CHECKING:",
]

[tool.coverage.coverage_conditional_plugin.rules]
no-cover-if-missing-setuptools_scm = "not is_installed('setuptools_scm')"
no-cover-if-not-linux = "'linux' != os_environ.get('COVERAGE_PLATFORM', sys_platform) and os_environ.get('COVERAGE_EXCLUDE_PLATFORM') != 'disable'"
no-cover-if-is-macos = "'darwin' == os_environ.get('COVERAGE_PLATFORM', sys_platform) and os_environ.get('COVERAGE_EXCLUDE_PLATFORM') != 'disable'"
no-cover-if-not-macos = "'darwin' != os_environ.get('COVERAGE_PLATFORM', sys_platform) and os_environ.get('COVERAGE_EXCLUDE_PLATFORM') != 'disable'"
no-cover-if-is-windows = "'win32' == os_environ.get('COVERAGE_PLATFORM', sys_platform) and os_environ.get('COVERAGE_EXCLUDE_PLATFORM') != 'disable'"
no-cover-if-not-windows = "'win32' != os_environ.get('COVERAGE_PLATFORM', sys_platform) and os_environ.get('COVERAGE_EXCLUDE_PLATFORM') != 'disable'"
no-cover-if-gte-py312 = "sys_version_info > (3, 12) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-is-py312 = "python_version == '3.12' and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-lt-py312 = "sys_version_info < (3, 12) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-lt-py311 = "sys_version_info < (3, 11) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-gte-py311 = "sys_version_info > (3, 11) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-is-py310 = "python_version == '3.10' and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-lt-py310 = "sys_version_info < (3, 10) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-gte-py310 = "sys_version_info > (3, 10) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"

[tool.isort]
profile = "black"
skip_glob = [
    "docs/conf.py",
    "venv*",
    "local",
]
multi_line_output = 3

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "error",
]

# need to ensure build directories aren't excluded from recursion
norecursedirs = []

[tool.setuptools_scm]
# To enable SCM versioning, we need an empty tool configuration for setuptools_scm

[tool.towncrier]
directory = "changes"
package = "briefcase"
package_dir = "src"
filename = "docs/background/releases.rst"
title_format = "{version} ({project_date})"
issue_format = "`#{issue} <https://github.com/beeware/briefcase/issues/{issue}>`__"
template = "changes/template.rst"
type = [
    { directory = "feature", name = "Features", showcontent = true },
    { directory = "bugfix", name = "Bugfixes", showcontent = true },
    { directory = "removal", name = "Backward Incompatible Changes", showcontent = true },
    { directory = "doc", name = "Documentation", showcontent = true },
    { directory = "misc", name = "Misc", showcontent = false },
]

[tool.codespell]
skip = '.git,*.pdf,*.svg'
# the way to make case sensitive skips of words etc
ignore-regex = '\bNd\b'
# case insensitive
# ignore-words-list = ''
