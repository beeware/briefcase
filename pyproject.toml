[build-system]
requires = ["setuptools>=61.2", "setuptools_scm[toml]>=7.0"]
build-backend = "setuptools.build_meta"

[project]
name = "briefcase"
authors = [{name = "Russell Keith-Magee", email = "russell@keith-magee.com"}]
maintainers = [{name = "Russell Keith-Magee", email = "russell@keith-magee.com"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
license = {text = "New BSD"}
description = "Tools to support converting a Python project into a standalone native application."
keywords = [
    "app",
    "packaging",
    "installer",
    "macOS",
    "iOS",
    "android",
    "mobile",
    "windows",
    "tvOS",
    "watch",
    "watchOS",
    "wearos",
    "web",
    "pyscript",
    "pyodide",
]
requires-python = ">= 3.8"
dependencies = [
    # Dependencies required at runtime are set as ranges to ensure maximum
    # compatibility with the end-user's development environment.
    # Any dependency that is part of the "core python toolchain" (e.g. pip,
    # wheel) specify a minimum version, but no maximum, because we always want
    # the most recent version.
    "build >= 0.10",
    'importlib_metadata >= 4.4; python_version <= "3.9"',
    "packaging >= 22.0",
    "pip >= 22",
    "setuptools >= 60",
    "wheel >= 0.37",
    # For the remaining packages: We set the lower version limit to the lowest
    # possible version that satisfies our API needs. If the package uses semver,
    # we set a limit to prevent the next major version (which will potentially
    # cause API breakages). If the package uses calver, we don't pin the upper
    # version, as the upper version provides no basis for determining API
    # stability.
    "cookiecutter >= 2.1, < 3.0",
    'dmgbuild >= 1.6, < 2.0; sys_platform == "darwin"',
    "GitPython >= 3.1, < 4.0",
    "platformdirs >= 2.6, < 4.0",
    "psutil >= 5.9, < 6.0",
    "requests >= 2.28, < 3.0",
    "rich >= 12.6, < 14.0",
    'tomli >= 2.0, < 3.0; python_version <= "3.10"',
    "tomli_w >= 1.0, < 2.0",
]
dynamic = ["version"]

[project.urls]
Homepage = "http://beeware.org/briefcase"
Funding = "https://beeware.org/contributing/membership/"
Documentation = "http://briefcase.readthedocs.io/en/latest/"
Tracker = "https://github.com/beeware/briefcase/issues"
Source = "https://github.com/beeware/briefcase"

[project.readme]
file = "README.rst"
content-type = "text/x-rst; charset=UTF-8"

[project.optional-dependencies]
# Extras used by developers *of* briefcase are pinned to specific versions to
# ensure environment consistency.
dev = [
    "coverage[toml] == 7.2.1",
    "pre-commit == 3.1.1",
    "pytest == 7.2.2",
    "pytest-tldr == 0.2.5",
    "setuptools_scm[toml] == 7.1.0",
    "tox == 4.4.7",
]
docs = [
    "furo == 2022.12.7",
    "pyenchant == 3.2.2",
    "sphinx == 6.1.3",
    "sphinx_tabs == 3.4.1",
    "sphinx-autobuild == 2021.3.14",
    "sphinxcontrib-spelling == 8.0.0",
]

[project.entry-points."briefcase.platforms"]
android = "briefcase.platforms.android"
iOS = "briefcase.platforms.iOS"
linux = "briefcase.platforms.linux"
macOS = "briefcase.platforms.macOS"
# tvOS = briefcase.platforms.tvOS
# watchOS = briefcase.platforms.watchOS
# wearos = briefcase.platforms.wearos
web = "briefcase.platforms.web"
windows = "briefcase.platforms.windows"

[project.entry-points."briefcase.formats.android"]
gradle = "briefcase.platforms.android.gradle"

[project.entry-points."briefcase.formats.ios"]
xcode = "briefcase.platforms.iOS.xcode"

[project.entry-points."briefcase.formats.linux"]
appimage = "briefcase.platforms.linux.appimage"
flatpak = "briefcase.platforms.linux.flatpak"
system = "briefcase.platforms.linux.system"
# snap = briefcase.platforms.linux.snap

[project.entry-points."briefcase.formats.macos"]
app = "briefcase.platforms.macOS.app"
xcode = "briefcase.platforms.macOS.xcode"
# briefcase.formats.tvOS =
# xcode = briefcase.platforms.tvOS.xcode
# briefcase.formats.watchOS =
# xcode = briefcase.platforms.watchOS.xcode
# briefcase.formats.wearos =
# gradle = briefcase.platforms.wearos.gradle

[project.entry-points."briefcase.formats.web"]
static = "briefcase.platforms.web.static"

[project.entry-points."briefcase.formats.windows"]
app = "briefcase.platforms.windows.app"
visualstudio = "briefcase.platforms.windows.visualstudio"

[project.scripts]
briefcase = "briefcase.__main__:main"

[tool.setuptools]
zip-safe = false
include-package-data = true
package-dir = {"" = "src"}
platforms = ["any"]
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.aliases]
test = "pytest"

[tool.coverage.run]
parallel = true
branch = true
relative_files = true
source_pkgs = ["briefcase"]

[tool.coverage.paths]
source = [
    "src",
    "**/site-packages",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true
precision = 1
exclude_lines = [
    "pragma: no cover",
    "@(abc\\.)?abstractmethod",
    "NotImplementedError\\(\\)",
    "if TYPE_CHECKING:",
]

[tool.isort]
profile = "black"
skip_glob = [
    "docs/conf.py",
    "venv*",
    "local",
]
multi_line_output = 3

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "error",
]

# need to ensure build directories aren't excluded from recursion
norecursedirs = []

[tool.setuptools_scm]
# To enable SCM versioning, we need an empty tool configuration for setuptools_scm

[tool.towncrier]
directory = "changes"
package = "briefcase"
package_dir = "src"
filename = "docs/background/releases.rst"
title_format = "{version} ({project_date})"
issue_format = "`#{issue} <https://github.com/beeware/briefcase/issues/{issue}>`__"
template = "changes/template.rst"
